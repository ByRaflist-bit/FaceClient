/*
 * FDPClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/SkidderMC/FDPClient/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.config.IntegerValue
import net.ccbluex.liquidbounce.config.choices
import net.ccbluex.liquidbounce.config.float
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.utils.kotlin.RandomUtils
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.Category
import net.minecraft.network.play.client.C01PacketChatMessage

object ChatBypass : Module("ChatBypass", Category.EXPLOIT, hideModule = false) {

    private val modeValue by choices("Mode", arrayOf("Null", "RandomChar", "Unicode", "RandomUnicode", "ToPinyin"), "Null")
    private val chanceValue by float("Chance", 0.2F, 0F..0.5F) { modeValue != "Unicode" }
    private val minUnicodeValue: IntegerValue = object : IntegerValue("MinUnicode", 1000, 0..100000) {
        override fun onChanged(oldValue: Int, newValue: Int) {
            if (newValue >= maxUnicodeValue.get()) {
                set(oldValue)
            }
        }
    }
    private val maxUnicodeValue: IntegerValue = object : IntegerValue("MaxUnicode", 20000, 0..100000) {
        override fun onChanged(oldValue: Int, newValue: Int) {
            if (newValue <= minUnicodeValue.get()) {
                set(oldValue)
            }
        }
    }
    @EventTarget
    fun onPacket(event: PacketEvent) {
        if (event.packet is C01PacketChatMessage) {
            val packet = event.packet
            val message = packet.message
            if (message.startsWith("/")) return
            when (modeValue.lowercase()) {
                else -> {
                    val sb = StringBuilder()
                    for (char in message.toCharArray()) {
                        when (modeValue.lowercase()) {
                            "null" -> {
                                sb.append(char)
                                if (Math.random() < chanceValue) {
                                    sb.append("\uF8FF")
                                }
                            }
                            "randomchar" -> {
                                sb.append(char)
                                if (Math.random() < chanceValue) {
                                    sb.append((RandomUtils.nextInt(minUnicodeValue.get(), maxUnicodeValue.get())).toChar())
                                }
                            }
                            "unicode" -> {
                                if (char.code in 33..128) {
                                    sb.append(Character.toChars(char.code + 65248))
                                } else {
                                    sb.append(char)
                                }
                            }
                            "randomunicode" -> {
                                if ((Math.random() < chanceValue) && (char.code in 33..128)) {
                                    sb.append(Character.toChars(char.code + 65248))
                                } else {
                                    sb.append(char)
                                }
                            }
                        }
                    }
                    packet.message = sb.toString()
                }
            }
            if (packet.message.length > 100) {
                packet.message = packet.message.substring(0, 100)
            }
        }
    }
    override val tag: String
        get() = modeValue
}